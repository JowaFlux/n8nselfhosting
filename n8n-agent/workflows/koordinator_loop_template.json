{
  "name": "Koordinator v1 (RAG + Loop ≥950)",
  "nodes": [
    {"parameters": {"path": "agent/run-950", "options": {"responseData": "JSON"}}, "id": "Webhook", "name": "Webhook", "type": "n8n-nodes-base.webhook", "typeVersion": 1, "position": [120,120]},
    {"parameters": {"functionCode": "const run_id = crypto.randomUUID();\nreturn [{json: {run_id}}];"}, "id": "GenerateRunId", "name": "Generate Run ID", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [320,60]},
    {"parameters": {"requestMethod": "POST", "url": "http://localhost:5678/webhook/proof/collect", "jsonParameters": true, "bodyParametersJson": "={\n  \"event\": \"start_run\",\n  \"run_id\": $json.run_id,\n  \"data\": {}\n}"}, "id": "StartRun", "name": "Start Run", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [520,60]},
    {"parameters": {"functionCode": "return [{json:{TARGET_SCORE: Number($env.TARGET_SCORE)||950, MAX_LOOPS: Number($env.MAX_LOOPS)||5, K:Number($env.TOP_K)||8}}];"}, "id": "Config", "name": "Config", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [320,120]},
    {"parameters": {"functionCode": "return [{json: {_t0: Date.now()}}];"}, "id": "StartEmbedTimer", "name": "Start Embed Timer", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [520,180]},
    {"parameters": {"requestMethod": "POST", "url": "http://host.docker.internal:11434/api/embeddings", "jsonParameters": true, "bodyParametersJson": "={\n  \"model\": \"${EMBED_MODEL}\",\n  \"prompt\": $json.task\n}"}, "id": "EmbedQuery", "name": "Query Embedding", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [720,180]},
    {"parameters": {"functionCode": "const duration_ms = Date.now() - $json._t0;\nreturn [{json: {duration_ms}}];"}, "id": "LogEmbedStep", "name": "Log Embed Step", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [920,180]},
    {"parameters": {"requestMethod": "POST", "url": "http://localhost:5678/webhook/proof/collect", "jsonParameters": true, "bodyParametersJson": "={\n  \"event\": \"step\",\n  \"run_id\": $json.run_id,\n  \"data\": {\n    \"step_id\": crypto.randomUUID(),\n    \"name\": \"EmbedQuery\",\n    \"status\": \"success\",\n    \"duration_ms\": $json.duration_ms,\n    \"retries\": 0,\n    \"message\": \"Query embedding completed\"\n  }\n}"}, "id": "SendEmbedStep", "name": "Send Embed Step", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [1120,180]},
    {"parameters": {"operation": "executeQuery", "query": "SELECT id, text, embedding FROM chunks"}, "id": "LoadChunks", "name": "SQLite Load Chunks", "type": "n8n-nodes-base.sqlite", "typeVersion": 1, "position": [1320,180], "credentials": {"sqlite": {"database":"/data/knowledge.sqlite"}}},
    {"parameters": {"functionCode": "function cosine(a,b){let d=0,an=0,bn=0;for(let i=0;i<a.length;i++){d+=a[i]*b[i];an+=a[i]*a[i];bn+=b[i]*b[i];}return d/(Math.sqrt(an)*Math.sqrt(bn)+1e-9);}\nconst q = JSON.parse(items[0].json.data.embedding||items[0].json.embedding||'[]');\nconst rows = items.slice(1).map(i=>({id:i.json.id,text:i.json.text, emb: JSON.parse(i.json.embedding)}));\nrows.forEach(r=> r.score = cosine(q,r.emb));\nrows.sort((a,b)=> b.score-a.score);\nconst K=Number($item(0).$node[\"Config\"].json.K)||8;\nreturn rows.slice(0,K).map(r=>({json:r}));"}, "id": "TopK", "name": "Top-K", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [1520,180]},
    {"parameters": {"functionCode": "const ctx = items.map(i=>`[${i.json.id}] ${i.json.text}`).join('\n---\n');\nreturn [{json:{context:ctx}}];"}, "id": "BuildCtx", "name": "Build Context", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [1720,180]},
    {"parameters": {"functionCode": "return [{json: {_t0: Date.now()}}];"}, "id": "StartChatTimer", "name": "Start Chat Timer", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [1920,180]},
    {"parameters": {"requestMethod": "POST", "url": "http://host.docker.internal:11434/api/chat", "jsonParameters": true, "options": {"timeout": 120000}, "bodyParametersJson": "={\n  \"model\": \"${CHAT_MODEL}\",\n  \"stream\": false,\n  \"messages\": [\n    {\"role\": \"system\", \"content\": {{$json.system||$env.AGENT_SYSTEM||\"Du bist Koordinator; antworte NUR JSON (plan, score, feedback, nächste_schritte)\"}}},\n    {\"role\": \"user\", \"content\": \"AUFTRAG:\\n\" + $json.task + \"\\n\\nKONTEXT:\\n\" + $json.context + \"\\n\\nGib strikt gültiges JSON zurück.\"}\n  ]\n}"}, "id": "Chat", "name": "Chat", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [2120,180]},
    {"parameters": {"functionCode": "const duration_ms = Date.now() - $json._t0;\nreturn [{json: {duration_ms}}];"}, "id": "LogChatStep", "name": "Log Chat Step", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [2320,180]},
    {"parameters": {"requestMethod": "POST", "url": "http://localhost:5678/webhook/proof/collect", "jsonParameters": true, "bodyParametersJson": "={\n  \"event\": \"step\",\n  \"run_id\": $json.run_id,\n  \"data\": {\n    \"step_id\": crypto.randomUUID(),\n    \"name\": \"Chat\",\n    \"status\": \"success\",\n    \"duration_ms\": $json.duration_ms,\n    \"retries\": 0,\n    \"message\": \"Chat response generated\"\n  }\n}"}, "id": "SendChatStep", "name": "Send Chat Step", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [2520,180]},
    {"parameters": {"fileName": "={{$json.run_id}}/chat_response.json", "fileContent": "={{JSON.stringify($json, null, 2)}}", "options": {"fileName": "/data/evidence"}}, "id": "SaveChatArtifact", "name": "Save Chat Artifact", "type": "n8n-nodes-base.writeBinaryFile", "typeVersion": 1, "position": [2720,180]},
    {"parameters": {"functionCode": "const artifact_id = crypto.randomUUID();\nconst path = `/data/evidence/${$json.run_id}/chat_response.json`;\nconst size_bytes = Buffer.byteLength(JSON.stringify($json), 'utf8');\nreturn [{json: {artifact_id, path, size_bytes}}];"}, "id": "PrepareChatArtifact", "name": "Prepare Chat Artifact", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [2920,180]},
    {"parameters": {"requestMethod": "POST", "url": "http://localhost:5678/webhook/proof/collect", "jsonParameters": true, "bodyParametersJson": "={\n  \"event\": \"artifact\",\n  \"run_id\": $json.run_id,\n  \"data\": {\n    \"artifact_id\": $json.artifact_id,\n    \"step_id\": crypto.randomUUID(),\n    \"path\": $json.path,\n    \"mime\": \"application/json\",\n    \"size_bytes\": $json.size_bytes,\n    \"checksum\": \"\"\n  }\n}"}, "id": "SendChatArtifact", "name": "Send Chat Artifact", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [3120,180]},
    {"parameters": {"conditions": {"number": [{"value1": "={{$json.score}}", "operation": "largerEqual", "value2": "={{$item(0).$node[\"Config\"].json.TARGET_SCORE}}"}]}}, "id": "Gate950", "name": "Gate ≥950", "type": "n8n-nodes-base.if", "typeVersion": 1, "position": [3320,180]},
    {"parameters": {"functionCode": "const score = $json.score || 50;\nconst status = score >= 60 ? 'success' : 'partial';\nconst completion = 1;\nconst correctness = $json.plan && $json.feedback ? 1 : 0.5;\nconst performance = $json.duration_ms < 30000 ? 1 : 0.5;\nconst robustness = 1;\nconst docs = 1;\nreturn [{json: {status, score, completion, correctness, performance, robustness, docs}}];"}, "id": "PrepareFinish", "name": "Prepare Finish", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [3520,120]},
    {"parameters": {"requestMethod": "POST", "url": "http://localhost:5678/webhook/proof/collect", "jsonParameters": true, "bodyParametersJson": "={\n  \"event\": \"finish_run\",\n  \"run_id\": $json.run_id,\n  \"data\": {\n    \"status\": $json.status,\n    \"score\": $json.score,\n    \"completion\": $json.completion,\n    \"correctness\": $json.correctness,\n    \"performance\": $json.performance,\n    \"robustness\": $json.robustness,\n    \"docs\": $json.docs\n  }\n}"}, "id": "FinishRun", "name": "Finish Run", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [3720,120]},
    {"parameters": {"responseBody": "={{$json}}", "responseCode": 200}, "id": "Respond", "name": "Respond", "type": "n8n-nodes-base.respondToWebhook", "typeVersion": 1, "position": [3920,60]},
    {"parameters": {"functionCode": "const last = items[0].json; const left = Number($item(0).$node['State'].json.left)-1; return [{json:{last_json:last, left}}];"}, "id": "Decr", "name": "Decrement Loop", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [3920,240]},
    {"parameters": {"functionCode": "return [{json:{left: Number($item(0).$node['Config'].json.MAX_LOOPS)||5}}];"}, "id": "State", "name": "State", "type": "n8n-nodes-base.function", "typeVersion": 2, "position": [3320,300]},
    {"parameters": {"conditions": {"number": [{"value1": "={{$json.left}}", "operation": "larger", "value2": 0}]}}, "id": "HasLoops", "name": "Has Loops", "type": "n8n-nodes-base.if", "typeVersion": 1, "position": [4120,240]},
    {"parameters": {"requestMethod": "POST", "url": "http://host.docker.internal:11434/api/chat", "jsonParameters": true, "bodyParametersJson": "={\n  \"model\": \"${CHAT_MODEL}\",\n  \"stream\": false,\n  \"messages\": [\n    {\"role\": \"system\", \"content\": \"Verbessere gezielt, erhöhe Score; liefere NUR JSON (gleiches Schema).\"},\n    {\"role\": \"user\", \"content\": \"Hier ist dein letzter JSON-Output: \\n\" + JSON.stringify($json.last_json) + \"\\nKriterien: Inhalt70/Form20/Innovation10.\"}\n  ]\n}"}, "id": "Improve", "name": "Improve", "type": "n8n-nodes-base.httpRequest", "typeVersion": 4, "position": [4320,240]}
  ],
  "connections": {
    "Webhook": {"main": [[{"node": "GenerateRunId", "type": "main", "index": 0}]]},
    "GenerateRunId": {"main": [[{"node": "StartRun", "type": "main", "index": 0}]]},
    "StartRun": {"main": [[{"node": "Config", "type": "main", "index": 0}]]},
    "Config": {"main": [[{"node": "StartEmbedTimer", "type": "main", "index": 0}]]},
    "StartEmbedTimer": {"main": [[{"node": "EmbedQuery", "type": "main", "index": 0}]]},
    "EmbedQuery": {"main": [[{"node": "LogEmbedStep", "type": "main", "index": 0}]]},
    "LogEmbedStep": {"main": [[{"node": "SendEmbedStep", "type": "main", "index": 0}]]},
    "SendEmbedStep": {"main": [[{"node": "LoadChunks", "type": "main", "index": 0}]]},
    "LoadChunks": {"main": [[{"node": "TopK", "type": "main", "index": 0}]]},
    "TopK": {"main": [[{"node": "BuildCtx", "type": "main", "index": 0}]]},
    "BuildCtx": {"main": [[{"node": "StartChatTimer", "type": "main", "index": 0}]]},
    "StartChatTimer": {"main": [[{"node": "Chat", "type": "main", "index": 0}]]},
    "Chat": {"main": [[{"node": "LogChatStep", "type": "main", "index": 0}]]},
    "LogChatStep": {"main": [[{"node": "SendChatStep", "type": "main", "index": 0}]]},
    "SendChatStep": {"main": [[{"node": "SaveChatArtifact", "type": "main", "index": 0}]]},
    "SaveChatArtifact": {"main": [[{"node": "PrepareChatArtifact", "type": "main", "index": 0}]]},
    "PrepareChatArtifact": {"main": [[{"node": "SendChatArtifact", "type": "main", "index": 0}]]},
    "SendChatArtifact": {"main": [[{"node": "Gate950", "type": "main", "index": 0}]]},
    "Gate950": {"main": [[{"node": "PrepareFinish", "type": "main", "index": 0}], [{"node": "State", "type": "main", "index": 0}]]},
    "PrepareFinish": {"main": [[{"node": "FinishRun", "type": "main", "index": 0}]]},
    "FinishRun": {"main": [[{"node": "Respond", "type": "main", "index": 0}]]},
    "State": {"main": [[{"node": "Decr", "type": "main", "index": 0}]]},
    "Decr": {"main": [[{"node": "HasLoops", "type": "main", "index": 0}]]},
    "HasLoops": {"main": [[{"node": "Improve", "type": "main", "index": 0}], [{"node": "Respond", "type": "main", "index": 0}]]},
    "Improve": {"main": [[{"node": "Gate950", "type": "main", "index": 0}]]}
  },
  "active": false
}
